{
    "collab_server" : "",
    "contents" : "Getting Started\n========================================================\nauthor: Mandy Vogel \ndate: 23.05.2016\nautosize: true\nfont-import: http://fonts.googleapis.com/css?family=Oswald\nfont-family: 'Risque'\ntransition: fade\n\nWhat is R?\n========================================================\ntype: section\n\nWhat is R?\n========================================================\nincremental: true\n\n- R is a high-level language and an environment for data analysis and graphics\n- influenced by S (Becker, Chamber, Wilks) and Scheme (Sussman)\n  - Trevor Hastie\n  - 1980s \n  - AT&T Laboratories\n- and created by Ross Ihaka and Robert Gentleman at the university of Auckland\n  - released for genereal use 1999\n  - for nearly all operating systems\n  - now managed by the R Development Core Team (University of Vienna)\n\nWhat is R?\n========================================================\n\n- R is free.\n- R is open source.\n- R is a dialect of S system.\n  \nWhat R can do ...\n========================================================\nincremental: true\n\n- white range of statistical methods\n- powerful graphics\n- data wrangling facilities\n  \nWhy R?\n========================================================\nincremental: true\n\n-  R is free and R is open source\n-  community \n-  most of your problems are already solved and with a high probability the solution is available from one of the repositories (as package)\n-  the language is easy to learn and also intuitive\n-  the graphics capabilities are impressive\n\n\nWell, then, why not?\n========================================================\n\nWell, then, why not?\n========================================================\ntitle: false\n\n![optional caption text](figures/lc.png)\n\n\nGetting help\n========================================================\nincremental: true\n\n- there is a help browser in the right lower panel\n- there a at three two R related search engines:\n  - http://www.rdocumentation.org/\n  - http://rseek.org/ (google wrapper)\n  - http://finzi.psych.upenn.edu/search.html\n- google your question (English!!!): good sites are stackoverflow, stackexchange\n- R taskviews: https://cran.r-project.org/web/views/\n\n\nGetting help inside R\n========================================================\nincremental: true\n\n- type ?command e.g.\n```{r eval=FALSE}\n?lm\n```\n- use **apropos()** e.g.\n```{r eval=FALSE}\napropos(\"linear\")\n```\n\nHelp: Zotero group statistics section\n========================================================\nBesides all LIFE Publication the group has an statistics section: https://www.zotero.org/groups/unimedleipzig/items\n\n- the group library entries are public\n- for full text access you have to be registered (feel free to add documents, hints, comments, links to screencasts, etc...)\n\n\nGUIs  \n========================================================\ntype: section\n\n\nGUIs  \n========================================================\n\n- to work with the original R console is tedious\n- over time many UIs were developed\n  - Rattle\n  - JGR\n  - Notepad++\n  - SciViews\n  - RGui\n  - etc pp...\n\nRecommended GUIs  \n========================================================\n\n- Hadley Wickham says:\n\n> [...] **Rstudio**, which I believe is the best development environment for most R users.\n> The only real competitor is **Emacs Speaks Statistics (ESS)**.  \n  \nWhy we do not use ESS during the course? \n========================================================\n\n\nBecause one ugly learning curve is enough!\n========================================================\n\n![optional caption text](figures/text_editors.jpg)\n\nBecause one ugly learning curve is enough!\n========================================================\ntitle: false\n\nPS: I love ESS, at least most of the time...\n\n\nLet's start!\n========================================================\ntype:section\n\n![](figures/hero.jpg)\n\n- the only way to learn R is using R...\n\n\nLet's start!\n========================================================\n\n- Has everybody a working installation? (Start R Studio)\n\n\nLet's start!\n========================================================\n- Has everybody the current R version? (type version)\n\n```{r getversion, message=FALSE, warning=FALSE, eval=TRUE}\nversion\n```\n\nLet's start!\n========================================================\n- Has everybody the current version of RStudio? Type:\n\n```{r getRSversion, message=FALSE, warning=FALSE, eval=F}\nRStudio.Version()\n```\n- you can check for newer versions via the Help menu -> Check for Updates\n\n\nR as a calculator\n========================================================\nincremental: true\n\n- in the console you can type commands and R will answer you\n- for example you can use R like a calulator\n```{r calculator, message=FALSE, warning=FALSE}\n2 + 2\n```\n\n  \n```{r calc2, message=FALSE, warning=FALSE}\nsqrt(4)\n```\n\nR scripts\n========================================================\nincremental: true\n\n- everything you can type in the console you can also type in a script file\n- go to the menu: file -> new file and choose R script\n- a script file can be saved (everything you typed in the console is much more difficult to recover) so use script files! for your analyses\n- in a script file hit Control + Enter simultaneously will send the line to the console\n- mark a region and hit Control + Enter will send the marked region\n\nObjects\n========================================================\ntype: section\n\n\nCreate objects\n========================================================\n\n- a object can be as simple as a single number\n- it can be a table\n- or a connection to a data base\n\nCreate objects\n========================================================\n- to work with objects (i.e. assess or use the containing information, manipulate them etc) we give a name to an object (assign), e.g.\n\n```{r create1, warning=FALSE, message=FALSE}\nx <- 2\ny <- 2\n```\n\nCreate objects\n========================================================\nincremental: true\n\n- you do not see any result but if you now type\n```{r xobj, warning=FALSE,message=FALSE}\nx \n```\n\n```{r yobj, warning=FALSE,message=FALSE}\ny \n```\n\n\n```{r sumobj, warning=FALSE,message=FALSE}\nx + y\n```\n\nAssigning\n========================================================\n\n- in the beginning the underscore was used for assigning\n- then it changed to a arrow (the head of the arrow points to the name, that's what I am using)\n- you can also use a equal sign (it is easier to type)\n  - it is not the same, \n  - and it makes a difference,\n  - but if you do not plan to become a R developer - it is ok...\n- all your created objects are listed (together with some basic information) in the Enviroment tab of the upper right panel (alternatively you use the menu: View -> Show Environment or use Control-8)\n\nTypes\n========================================================\n- we have seen how numbers are assigned to variables\n- there are other types, namely **character** and **logical**\n\nTypes: character\n========================================================\n\n- a variable of type character can be a single letter, a word, a sentence, or a whole book:\n\n```{r word, warning=FALSE,message=FALSE}\na <- \"b\"\nb <- \"Wort\"\nsentence <- \"Hello world\" \n```\n\nTypes: character\n========================================================\n\n```{r word1, warning=FALSE,message=FALSE}\na \n```\n\n```{r word2, warning=FALSE,message=FALSE}\nb\n```\n\n```{r word3, warning=FALSE,message=FALSE}\nsentence\n```\n\n\nTypes: logical\n========================================================\nincremental: true\n\n- a variable of type logical can have two values `TRUE` and `FALSE`\n- we can turn logical into numerical values, then FALSE will become a 0 and TRUE a 1\n- these types of variables are mostly used for filtering, e.g. we can ask\n\nTypes: logical\n========================================================\nincremental: true\n\n```{r logical, message=FALSE, warning=FALSE}\nx > 3\n```\n\n```{r logical3, message=FALSE, warning=FALSE}\nx == 3\n```\n\n```{r logical2, message=FALSE, warning=FALSE}\nx < 3\n```\n\nTypes: logical\n========================================================\nincremental: true\n\n - it also works with character\n\n```{r logical5, message=FALSE, warning=FALSE}\na == \"a\"\n```\n\n\n```{r logical4, message=FALSE, warning=FALSE}\na == \"b\"\n```\n\nTypes: other\n========================================================\n\n- bad news: there are 24 types\n- good news: the three above are all 99.9 percent of R users will ever need to know about\n\n\nVectors\n========================================================\n- combining several single values of the same type yields a vector\n  - a vector of numbers (i.e. a numeric vector)\n  - a vector of characters (i.e. a character vector)\n  - a vector consisting of TRUEs and FALSEs (i.e. a logical vector)\n- a vector can be seen like a column of a data table\n\nCreation of vectors\n========================================================\n- one of the most important functions in R is the **c()** \n- c is for *c* oncatenate or *c* ombine\n\n```{r vector, warning=FALSE,message=FALSE}\nv <- c(1,4,7,2)\nv\n```\n\n- so v has more than one element\n- we can use *length()* to count the elements contained in a vector\n```{r vectorlength, warning=FALSE,message=FALSE}\nlength(v)\n```\n\nExercise\n========================================================\nThere are some build in vectors in R, containing information frequently used by users. Here are some of them:\n\n- letters\n- LETTERS\n- month.abb\n- month.name\n\nGet the length of these vectors!\n\nExercise\n========================================================\n\nThe function \n```{r colors, message=FALSE, warning=F, eval=FALSE}\ncolors()\n```\n produces a vector containing the names of all predefined colors available in R.  \n\n- Use this function in combination with length() to find the number of named colors!  \n- What type is the produced vector (remember our three types)?\n\n\nThe Next Step\n========================================================\n\n- after vectors we come to\n- **DATA FRAME**\n\nData Frames\n========================================================\ntype: section\n\n\nData Frames\n========================================================\n- in R an object representing data table is called data frame\n- a data frame is a rectangular data structure of rows and columns where\n  - the columns are containing the variables\n  - the rows are containing the observations\n\nData Frames\n========================================================\n- as the built-in vectors seen above R also comes with a lot of example data (https://vincentarelbundock.github.io/Rdatasets/datasets.html)\n- go to the console and type\n\n```{r dataframe1, message=FALSE, warning=FALSE}\ndata(iris)\nsummary(iris)\n```\n- the **data()** command loads the data\n- and **summary()** gives a short summary of the object\n\n\nData viewer\n========================================================\n- for data frame RStudio provides some special functionalities\n- one of them is the data viewer:\n  - go to the enviromnent tab\n  - now you should see two sections *Data* and *Values*\n  - in the data section there should be an entry for our **iris** data frame\n  - you can click on the blue bullet on the left of the data frame's name\n  - you can click on the table symbols on the right -> the data viewer should open\n\nData viewer\n========================================================\nThe data viewer provides:\n  - filtering\n  - sorting\n  - detaching\n\nCave: the number of rows as well as the number of columns shown in the data viewer are limited!\n\nExercise\n========================================================\nType the following commands. What do they do?\n```{r irisex, eval=FALSE}\nhead(iris)\nnames(iris)\n?iris\nnrow(iris)\nncol(iris)\nplot(iris)\n```\n\nAccessing columns of data frames\n========================================================\nThe first way to access a column of a data frame is typing the name of the data frame followed by a dollar sign followed by the name of the column. **HINT:** RStudio provides very comprehensiv autocompletion functionality by hitting the TAB key \n\n```{r iriscol}\niris$Petal.Length\n```\n\nBasic plotting using traditional graphics\n========================================================\nincremental: true\n\n- we have already seen how **plot()** works with data frames\n- we also can give plot other objects (like one or two vectors), it tries to guess to figure out the best way to plot the objects given to it\n\n```{r irisplot1, message=FALSE, warning=FALSE,fig.align='center'}\nplot(iris$Sepal.Length)\n```\n\nExercise\n========================================================\n\n- Run the following lines using autocompletion (TAB!!!!)!\n- What kinds of graphics are produced?\n\n```{r, eval=FALSE}\nplot(iris$Sepal.Length,iris$Petal.Length)\n```\n\n```{r, eval=FALSE}\nplot(iris$Species,iris$Petal.Length)\n```\n\n```{r, eval=FALSE}\nplot(iris$Species)\n```\n\n```{r, eval=FALSE}\nplot(iris$Petal.Length,iris$Species)\n```\n\n```{r, eval=FALSE}\nplot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species)\n```\n\nAccessing parts of data frames - part II\n========================================================\nincremental: true\ntype: section\n\n\nAccessing parts of data frames - part II\n========================================================\nincremental: true\n\n- we've already seen how to access columns using the $-sign\n- we also can use numbers (so called indeces)\n- first we try to extract the 20th element from our *letters* vector from above\n  - we need the **20**\n  - and square brackets\n  - and of course the vector\n\n```{r index1, eval=TRUE}\nletters[20]\n```\n\nAccessing parts of data frames - part II\n========================================================\nincremental: true\ntitle: false\n\n- we can also get more than one, say we want the write *hello* in a tedious way\n  - we need like above the numbers\n  - the square brackets\n  - the vector\n  - but also the **c()** function the combine the single indices \n```{r index2, eval=TRUE}\nletters[c(8,5,12,12,15)]\n```\n\nAccessing parts of data frames - part II\n========================================================\nincremental: true\ntitle: false\n\n\n- a vector has one dimensions (only the length)\n- so there is only one index needed to access an element of a vector (we use 20 the get the 20th element)\n\nAccessing parts of data frames - part II\n========================================================\nincremental: true\ntitle: false\n\n- a data frame (a data table) has two dimensions: rows and columns\n- to extract a specified element I have to specify both of them, e.g. the element which is in the first row and the first column\n\n```{r index3}\niris[1,1]\n```\n\n- in R the first index specifies the row(s), the second the (columns)\n\nAccessing parts of data frames - part II\n========================================================\ntitle: false\n\n- you can also extract more than one element\n\n```{r index4}\niris[c(1,3),1]\n```\n\n```{r index5}\niris[1:3,1:3]\n```\n\nAccessing parts of data frames - part II\n========================================================\ntitle: false\n\n- leaving the place for an index blank means *everything*\n- first row\n\n```{r index6}\niris[1,]\n```\n\n- first column\n```{r index7}\niris[,1]\n```\n\nExercise\n========================================================\n- extract rows 11-15\n- extract rows 2,4,and 100\n- use the **summary()** function on the *Sepal.Width* column. What is the mean of *Sepal.Width*. (How did you access the respective column, which of the to ways did you choose?)\n- use the **hist()** function to plot a histogram of *Sepal.Width*\n\nExercise\n========================================================\n\nR can import data of different forms, from different file types, etc.\nIt is important to remember: for almost every kind of file type you have to \nuse a different function, e.g.\n\nFile Type | function to load the data | package\n----------|--------------------------|---------\n.rdata (R's own format) | **load()**| base\n.csv (English)      | **read.csv()**| base\n.csv  (German)    | **read.csv()** | base\n.txt | **read.table()** | base\n.xlsx | **read_excel()** | readxl\n.sav (SPSS)| **spss.get()**| Hmisc\n.dta (Stata) | **stata.get()**|Hmisc\n.sasbdat (SAS) | **sas.get()** | Hmisc\n.sasxport (SAS Transport Files) | **sasxport.get()** | Hmisc\n\nAll these functionalities are also available via the *Import Dataset* dialog. (Menu: Tools -> Import Dataset or via the Environment tab).\n\nExercise\n========================================================\n\nFor now we want only use one of these functions to import a data set. Run the following line of code or use the data import menu...\n\n```{r loaddata}\neducation <- read.csv(\"http://www.barrolee.com/data/BL_v2.1/BL2013_MF1599_v2.1.csv\")\n```\n\nRun **summary()** on the data frame. \n- What is the highest percentage of no schooling (*lu*)\n- Plot *lp* (percentage of population with primary school as highest level) vs. *lpc* (percentage which had primary school completed)\n- Try indicate different contries by colour\n- add a line through (0,0) with a slope of 1 using the command **abline(0,1)**\n  - The majority of points are below the line, some are on the line. Why aren't any points above the line? \n\n",
    "created" : 1463902563577.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3645263648",
    "id" : "72FFD417",
    "lastKnownWriteTime" : 1463939133,
    "last_content_update" : 1463939133325,
    "path" : "/media/mandy/Volume/transcend/life/2016kurs/session1/intro.Rpres",
    "project_path" : "intro.Rpres",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}